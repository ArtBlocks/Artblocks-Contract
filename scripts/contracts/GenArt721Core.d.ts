/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface GenArt721CoreInterface extends ethers.utils.Interface {
  functions: {
    "addMintWhitelisted(address)": FunctionFragment;
    "addProject(string,address,uint256,bool)": FunctionFragment;
    "addProjectScript(uint256,string)": FunctionFragment;
    "addWhitelisted(address)": FunctionFragment;
    "admin()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "artblocksAddress()": FunctionFragment;
    "artblocksPercentage()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "clearTokenIpfsImageUri(uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getRoyaltyData(uint256)": FunctionFragment;
    "hashToTokenId(bytes32)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isMintWhitelisted(address)": FunctionFragment;
    "isWhitelisted(address)": FunctionFragment;
    "mint(address,uint256,address)": FunctionFragment;
    "name()": FunctionFragment;
    "nextProjectId()": FunctionFragment;
    "overrideTokenDynamicImageWithIpfsLink(uint256,string)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "projectDetails(uint256)": FunctionFragment;
    "projectIdToAdditionalPayee(uint256)": FunctionFragment;
    "projectIdToAdditionalPayeePercentage(uint256)": FunctionFragment;
    "projectIdToArtistAddress(uint256)": FunctionFragment;
    "projectIdToCurrencyAddress(uint256)": FunctionFragment;
    "projectIdToCurrencySymbol(uint256)": FunctionFragment;
    "projectIdToPricePerTokenInWei(uint256)": FunctionFragment;
    "projectIdToSecondaryMarketRoyaltyPercentage(uint256)": FunctionFragment;
    "projectScriptByIndex(uint256,uint256)": FunctionFragment;
    "projectScriptInfo(uint256)": FunctionFragment;
    "projectShowAllTokens(uint256)": FunctionFragment;
    "projectTokenInfo(uint256)": FunctionFragment;
    "projectURIInfo(uint256)": FunctionFragment;
    "randomizerContract()": FunctionFragment;
    "removeMintWhitelisted(address)": FunctionFragment;
    "removeProjectLastScript(uint256)": FunctionFragment;
    "removeWhitelisted(address)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "staticIpfsImageLink(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "toggleProjectIsActive(uint256)": FunctionFragment;
    "toggleProjectIsDynamic(uint256)": FunctionFragment;
    "toggleProjectIsLocked(uint256)": FunctionFragment;
    "toggleProjectIsPaused(uint256)": FunctionFragment;
    "toggleProjectUseHashString(uint256)": FunctionFragment;
    "toggleProjectUseIpfsForStatic(uint256)": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenIdToHash(uint256)": FunctionFragment;
    "tokenIdToProjectId(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "tokensOfOwner(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "updateArtblocksAddress(address)": FunctionFragment;
    "updateArtblocksPercentage(uint256)": FunctionFragment;
    "updateProjectAdditionalPayeeInfo(uint256,address,uint256)": FunctionFragment;
    "updateProjectArtistAddress(uint256,address)": FunctionFragment;
    "updateProjectArtistName(uint256,string)": FunctionFragment;
    "updateProjectBaseIpfsURI(uint256,string)": FunctionFragment;
    "updateProjectBaseURI(uint256,string)": FunctionFragment;
    "updateProjectCurrencyInfo(uint256,string,address)": FunctionFragment;
    "updateProjectDescription(uint256,string)": FunctionFragment;
    "updateProjectIpfsHash(uint256,string)": FunctionFragment;
    "updateProjectLicense(uint256,string)": FunctionFragment;
    "updateProjectMaxInvocations(uint256,uint256)": FunctionFragment;
    "updateProjectName(uint256,string)": FunctionFragment;
    "updateProjectPricePerTokenInWei(uint256,uint256)": FunctionFragment;
    "updateProjectScript(uint256,uint256,string)": FunctionFragment;
    "updateProjectScriptJSON(uint256,string)": FunctionFragment;
    "updateProjectSecondaryMarketRoyaltyPercentage(uint256,uint256)": FunctionFragment;
    "updateProjectWebsite(uint256,string)": FunctionFragment;
    "updateRandomizerAddress(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addMintWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addProject",
    values: [string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "addProjectScript",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "artblocksAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "artblocksPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "clearTokenIpfsImageUri",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashToTokenId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isMintWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextProjectId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "overrideTokenDynamicImageWithIpfsLink",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projectDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projectIdToAdditionalPayee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projectIdToAdditionalPayeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projectIdToArtistAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projectIdToCurrencyAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projectIdToCurrencySymbol",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projectIdToPricePerTokenInWei",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projectIdToSecondaryMarketRoyaltyPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projectScriptByIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projectScriptInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projectShowAllTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projectTokenInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projectURIInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "randomizerContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeMintWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProjectLastScript",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "staticIpfsImageLink",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleProjectIsActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleProjectIsDynamic",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleProjectIsLocked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleProjectIsPaused",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleProjectUseHashString",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleProjectUseIpfsForStatic",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdToHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdToProjectId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensOfOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateArtblocksAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateArtblocksPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProjectAdditionalPayeeInfo",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProjectArtistAddress",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProjectArtistName",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProjectBaseIpfsURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProjectBaseURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProjectCurrencyInfo",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProjectDescription",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProjectIpfsHash",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProjectLicense",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProjectMaxInvocations",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProjectName",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProjectPricePerTokenInWei",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProjectScript",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProjectScriptJSON",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProjectSecondaryMarketRoyaltyPercentage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProjectWebsite",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRandomizerAddress",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addMintWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addProject", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addProjectScript",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "artblocksAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "artblocksPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearTokenIpfsImageUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashToTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMintWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextProjectId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "overrideTokenDynamicImageWithIpfsLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "projectDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectIdToAdditionalPayee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectIdToAdditionalPayeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectIdToArtistAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectIdToCurrencyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectIdToCurrencySymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectIdToPricePerTokenInWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectIdToSecondaryMarketRoyaltyPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectScriptByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectScriptInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectShowAllTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectURIInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomizerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMintWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProjectLastScript",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "staticIpfsImageLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleProjectIsActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleProjectIsDynamic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleProjectIsLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleProjectIsPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleProjectUseHashString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleProjectUseIpfsForStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToProjectId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensOfOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateArtblocksAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateArtblocksPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProjectAdditionalPayeeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProjectArtistAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProjectArtistName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProjectBaseIpfsURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProjectBaseURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProjectCurrencyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProjectDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProjectIpfsHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProjectLicense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProjectMaxInvocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProjectName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProjectPricePerTokenInWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProjectScript",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProjectScriptJSON",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProjectSecondaryMarketRoyaltyPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProjectWebsite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRandomizerAddress",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Mint(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class GenArt721Core extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GenArt721CoreInterface;

  functions: {
    addMintWhitelisted(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addMintWhitelisted(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addProject(
      _projectName: string,
      _artistAddress: string,
      _pricePerTokenInWei: BigNumberish,
      _dynamic: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addProject(string,address,uint256,bool)"(
      _projectName: string,
      _artistAddress: string,
      _pricePerTokenInWei: BigNumberish,
      _dynamic: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addProjectScript(
      _projectId: BigNumberish,
      _script: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addProjectScript(uint256,string)"(
      _projectId: BigNumberish,
      _script: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addWhitelisted(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addWhitelisted(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    "admin()"(overrides?: CallOverrides): Promise<[string]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    artblocksAddress(overrides?: CallOverrides): Promise<[string]>;

    "artblocksAddress()"(overrides?: CallOverrides): Promise<[string]>;

    artblocksPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    "artblocksPercentage()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    clearTokenIpfsImageUri(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "clearTokenIpfsImageUri(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoyaltyData(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        artistAddress: string;
        additionalPayee: string;
        additionalPayeePercentage: BigNumber;
        royaltyFeeByID: BigNumber;
      }
    >;

    "getRoyaltyData(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        artistAddress: string;
        additionalPayee: string;
        additionalPayeePercentage: BigNumber;
        royaltyFeeByID: BigNumber;
      }
    >;

    hashToTokenId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "hashToTokenId(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMintWhitelisted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isMintWhitelisted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelisted(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isWhitelisted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      _to: string,
      _projectId: BigNumberish,
      _by: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mint(address,uint256,address)"(
      _to: string,
      _projectId: BigNumberish,
      _by: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    nextProjectId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nextProjectId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    overrideTokenDynamicImageWithIpfsLink(
      _tokenId: BigNumberish,
      _ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "overrideTokenDynamicImageWithIpfsLink(uint256,string)"(
      _tokenId: BigNumberish,
      _ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    projectDetails(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, boolean] & {
        projectName: string;
        artist: string;
        description: string;
        website: string;
        license: string;
        dynamic: boolean;
      }
    >;

    "projectDetails(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, boolean] & {
        projectName: string;
        artist: string;
        description: string;
        website: string;
        license: string;
        dynamic: boolean;
      }
    >;

    projectIdToAdditionalPayee(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "projectIdToAdditionalPayee(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    projectIdToAdditionalPayeePercentage(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "projectIdToAdditionalPayeePercentage(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    projectIdToArtistAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "projectIdToArtistAddress(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    projectIdToCurrencyAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "projectIdToCurrencyAddress(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    projectIdToCurrencySymbol(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "projectIdToCurrencySymbol(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    projectIdToPricePerTokenInWei(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "projectIdToPricePerTokenInWei(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    projectIdToSecondaryMarketRoyaltyPercentage(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "projectIdToSecondaryMarketRoyaltyPercentage(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    projectScriptByIndex(
      _projectId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "projectScriptByIndex(uint256,uint256)"(
      _projectId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    projectScriptInfo(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, string, boolean, boolean] & {
        scriptJSON: string;
        scriptCount: BigNumber;
        useHashString: boolean;
        ipfsHash: string;
        locked: boolean;
        paused: boolean;
      }
    >;

    "projectScriptInfo(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, string, boolean, boolean] & {
        scriptJSON: string;
        scriptCount: BigNumber;
        useHashString: boolean;
        ipfsHash: string;
        locked: boolean;
        paused: boolean;
      }
    >;

    projectShowAllTokens(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "projectShowAllTokens(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    projectTokenInfo(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string,
        BigNumber,
        string,
        string
      ] & {
        artistAddress: string;
        pricePerTokenInWei: BigNumber;
        invocations: BigNumber;
        maxInvocations: BigNumber;
        active: boolean;
        additionalPayee: string;
        additionalPayeePercentage: BigNumber;
        currency: string;
        currencyAddress: string;
      }
    >;

    "projectTokenInfo(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string,
        BigNumber,
        string,
        string
      ] & {
        artistAddress: string;
        pricePerTokenInWei: BigNumber;
        invocations: BigNumber;
        maxInvocations: BigNumber;
        active: boolean;
        additionalPayee: string;
        additionalPayeePercentage: BigNumber;
        currency: string;
        currencyAddress: string;
      }
    >;

    projectURIInfo(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        projectBaseURI: string;
        projectBaseIpfsURI: string;
        useIpfs: boolean;
      }
    >;

    "projectURIInfo(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        projectBaseURI: string;
        projectBaseIpfsURI: string;
        useIpfs: boolean;
      }
    >;

    randomizerContract(overrides?: CallOverrides): Promise<[string]>;

    "randomizerContract()"(overrides?: CallOverrides): Promise<[string]>;

    removeMintWhitelisted(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeMintWhitelisted(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeProjectLastScript(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeProjectLastScript(uint256)"(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeWhitelisted(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeWhitelisted(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      to: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      to: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    staticIpfsImageLink(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "staticIpfsImageLink(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    toggleProjectIsActive(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "toggleProjectIsActive(uint256)"(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleProjectIsDynamic(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "toggleProjectIsDynamic(uint256)"(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleProjectIsLocked(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "toggleProjectIsLocked(uint256)"(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleProjectIsPaused(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "toggleProjectIsPaused(uint256)"(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleProjectUseHashString(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "toggleProjectUseHashString(uint256)"(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleProjectUseIpfsForStatic(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "toggleProjectUseIpfsForStatic(uint256)"(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenIdToHash(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tokenIdToHash(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenIdToProjectId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokenIdToProjectId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tokenURI(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokensOfOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "tokensOfOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateArtblocksAddress(
      _artblocksAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateArtblocksAddress(address)"(
      _artblocksAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateArtblocksPercentage(
      _artblocksPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateArtblocksPercentage(uint256)"(
      _artblocksPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProjectAdditionalPayeeInfo(
      _projectId: BigNumberish,
      _additionalPayee: string,
      _additionalPayeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateProjectAdditionalPayeeInfo(uint256,address,uint256)"(
      _projectId: BigNumberish,
      _additionalPayee: string,
      _additionalPayeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProjectArtistAddress(
      _projectId: BigNumberish,
      _artistAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateProjectArtistAddress(uint256,address)"(
      _projectId: BigNumberish,
      _artistAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProjectArtistName(
      _projectId: BigNumberish,
      _projectArtistName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateProjectArtistName(uint256,string)"(
      _projectId: BigNumberish,
      _projectArtistName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProjectBaseIpfsURI(
      _projectId: BigNumberish,
      _projectBaseIpfsURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateProjectBaseIpfsURI(uint256,string)"(
      _projectId: BigNumberish,
      _projectBaseIpfsURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProjectBaseURI(
      _projectId: BigNumberish,
      _newBaseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateProjectBaseURI(uint256,string)"(
      _projectId: BigNumberish,
      _newBaseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProjectCurrencyInfo(
      _projectId: BigNumberish,
      _currencySymbol: string,
      _currencyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateProjectCurrencyInfo(uint256,string,address)"(
      _projectId: BigNumberish,
      _currencySymbol: string,
      _currencyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProjectDescription(
      _projectId: BigNumberish,
      _projectDescription: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateProjectDescription(uint256,string)"(
      _projectId: BigNumberish,
      _projectDescription: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProjectIpfsHash(
      _projectId: BigNumberish,
      _ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateProjectIpfsHash(uint256,string)"(
      _projectId: BigNumberish,
      _ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProjectLicense(
      _projectId: BigNumberish,
      _projectLicense: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateProjectLicense(uint256,string)"(
      _projectId: BigNumberish,
      _projectLicense: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProjectMaxInvocations(
      _projectId: BigNumberish,
      _maxInvocations: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateProjectMaxInvocations(uint256,uint256)"(
      _projectId: BigNumberish,
      _maxInvocations: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProjectName(
      _projectId: BigNumberish,
      _projectName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateProjectName(uint256,string)"(
      _projectId: BigNumberish,
      _projectName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProjectPricePerTokenInWei(
      _projectId: BigNumberish,
      _pricePerTokenInWei: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateProjectPricePerTokenInWei(uint256,uint256)"(
      _projectId: BigNumberish,
      _pricePerTokenInWei: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProjectScript(
      _projectId: BigNumberish,
      _scriptId: BigNumberish,
      _script: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateProjectScript(uint256,uint256,string)"(
      _projectId: BigNumberish,
      _scriptId: BigNumberish,
      _script: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProjectScriptJSON(
      _projectId: BigNumberish,
      _projectScriptJSON: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateProjectScriptJSON(uint256,string)"(
      _projectId: BigNumberish,
      _projectScriptJSON: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProjectSecondaryMarketRoyaltyPercentage(
      _projectId: BigNumberish,
      _secondMarketRoyalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateProjectSecondaryMarketRoyaltyPercentage(uint256,uint256)"(
      _projectId: BigNumberish,
      _secondMarketRoyalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProjectWebsite(
      _projectId: BigNumberish,
      _projectWebsite: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateProjectWebsite(uint256,string)"(
      _projectId: BigNumberish,
      _projectWebsite: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRandomizerAddress(
      _randomizerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateRandomizerAddress(address)"(
      _randomizerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addMintWhitelisted(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addMintWhitelisted(address)"(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addProject(
    _projectName: string,
    _artistAddress: string,
    _pricePerTokenInWei: BigNumberish,
    _dynamic: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addProject(string,address,uint256,bool)"(
    _projectName: string,
    _artistAddress: string,
    _pricePerTokenInWei: BigNumberish,
    _dynamic: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addProjectScript(
    _projectId: BigNumberish,
    _script: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addProjectScript(uint256,string)"(
    _projectId: BigNumberish,
    _script: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addWhitelisted(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addWhitelisted(address)"(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  "admin()"(overrides?: CallOverrides): Promise<string>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  artblocksAddress(overrides?: CallOverrides): Promise<string>;

  "artblocksAddress()"(overrides?: CallOverrides): Promise<string>;

  artblocksPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  "artblocksPercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  clearTokenIpfsImageUri(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "clearTokenIpfsImageUri(uint256)"(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getApproved(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoyaltyData(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber] & {
      artistAddress: string;
      additionalPayee: string;
      additionalPayeePercentage: BigNumber;
      royaltyFeeByID: BigNumber;
    }
  >;

  "getRoyaltyData(uint256)"(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber] & {
      artistAddress: string;
      additionalPayee: string;
      additionalPayeePercentage: BigNumber;
      royaltyFeeByID: BigNumber;
    }
  >;

  hashToTokenId(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "hashToTokenId(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMintWhitelisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isMintWhitelisted(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isWhitelisted(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    _to: string,
    _projectId: BigNumberish,
    _by: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mint(address,uint256,address)"(
    _to: string,
    _projectId: BigNumberish,
    _by: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nextProjectId(overrides?: CallOverrides): Promise<BigNumber>;

  "nextProjectId()"(overrides?: CallOverrides): Promise<BigNumber>;

  overrideTokenDynamicImageWithIpfsLink(
    _tokenId: BigNumberish,
    _ipfsHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "overrideTokenDynamicImageWithIpfsLink(uint256,string)"(
    _tokenId: BigNumberish,
    _ipfsHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ownerOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  projectDetails(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, boolean] & {
      projectName: string;
      artist: string;
      description: string;
      website: string;
      license: string;
      dynamic: boolean;
    }
  >;

  "projectDetails(uint256)"(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, boolean] & {
      projectName: string;
      artist: string;
      description: string;
      website: string;
      license: string;
      dynamic: boolean;
    }
  >;

  projectIdToAdditionalPayee(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "projectIdToAdditionalPayee(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  projectIdToAdditionalPayeePercentage(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "projectIdToAdditionalPayeePercentage(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  projectIdToArtistAddress(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "projectIdToArtistAddress(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  projectIdToCurrencyAddress(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "projectIdToCurrencyAddress(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  projectIdToCurrencySymbol(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "projectIdToCurrencySymbol(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  projectIdToPricePerTokenInWei(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "projectIdToPricePerTokenInWei(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  projectIdToSecondaryMarketRoyaltyPercentage(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "projectIdToSecondaryMarketRoyaltyPercentage(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  projectScriptByIndex(
    _projectId: BigNumberish,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "projectScriptByIndex(uint256,uint256)"(
    _projectId: BigNumberish,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  projectScriptInfo(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean, string, boolean, boolean] & {
      scriptJSON: string;
      scriptCount: BigNumber;
      useHashString: boolean;
      ipfsHash: string;
      locked: boolean;
      paused: boolean;
    }
  >;

  "projectScriptInfo(uint256)"(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean, string, boolean, boolean] & {
      scriptJSON: string;
      scriptCount: BigNumber;
      useHashString: boolean;
      ipfsHash: string;
      locked: boolean;
      paused: boolean;
    }
  >;

  projectShowAllTokens(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "projectShowAllTokens(uint256)"(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  projectTokenInfo(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      string,
      BigNumber,
      string,
      string
    ] & {
      artistAddress: string;
      pricePerTokenInWei: BigNumber;
      invocations: BigNumber;
      maxInvocations: BigNumber;
      active: boolean;
      additionalPayee: string;
      additionalPayeePercentage: BigNumber;
      currency: string;
      currencyAddress: string;
    }
  >;

  "projectTokenInfo(uint256)"(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      string,
      BigNumber,
      string,
      string
    ] & {
      artistAddress: string;
      pricePerTokenInWei: BigNumber;
      invocations: BigNumber;
      maxInvocations: BigNumber;
      active: boolean;
      additionalPayee: string;
      additionalPayeePercentage: BigNumber;
      currency: string;
      currencyAddress: string;
    }
  >;

  projectURIInfo(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean] & {
      projectBaseURI: string;
      projectBaseIpfsURI: string;
      useIpfs: boolean;
    }
  >;

  "projectURIInfo(uint256)"(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean] & {
      projectBaseURI: string;
      projectBaseIpfsURI: string;
      useIpfs: boolean;
    }
  >;

  randomizerContract(overrides?: CallOverrides): Promise<string>;

  "randomizerContract()"(overrides?: CallOverrides): Promise<string>;

  removeMintWhitelisted(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeMintWhitelisted(address)"(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeProjectLastScript(
    _projectId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeProjectLastScript(uint256)"(
    _projectId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeWhitelisted(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeWhitelisted(address)"(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    to: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    to: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  staticIpfsImageLink(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "staticIpfsImageLink(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  toggleProjectIsActive(
    _projectId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "toggleProjectIsActive(uint256)"(
    _projectId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleProjectIsDynamic(
    _projectId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "toggleProjectIsDynamic(uint256)"(
    _projectId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleProjectIsLocked(
    _projectId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "toggleProjectIsLocked(uint256)"(
    _projectId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleProjectIsPaused(
    _projectId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "toggleProjectIsPaused(uint256)"(
    _projectId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleProjectUseHashString(
    _projectId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "toggleProjectUseHashString(uint256)"(
    _projectId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleProjectUseIpfsForStatic(
    _projectId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "toggleProjectUseIpfsForStatic(uint256)"(
    _projectId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenByIndex(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenIdToHash(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenIdToHash(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenIdToProjectId(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenIdToProjectId(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenOfOwnerByIndex(address,uint256)"(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenURI(uint256)"(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  tokensOfOwner(owner: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  "tokensOfOwner(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateArtblocksAddress(
    _artblocksAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateArtblocksAddress(address)"(
    _artblocksAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateArtblocksPercentage(
    _artblocksPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateArtblocksPercentage(uint256)"(
    _artblocksPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProjectAdditionalPayeeInfo(
    _projectId: BigNumberish,
    _additionalPayee: string,
    _additionalPayeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateProjectAdditionalPayeeInfo(uint256,address,uint256)"(
    _projectId: BigNumberish,
    _additionalPayee: string,
    _additionalPayeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProjectArtistAddress(
    _projectId: BigNumberish,
    _artistAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateProjectArtistAddress(uint256,address)"(
    _projectId: BigNumberish,
    _artistAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProjectArtistName(
    _projectId: BigNumberish,
    _projectArtistName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateProjectArtistName(uint256,string)"(
    _projectId: BigNumberish,
    _projectArtistName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProjectBaseIpfsURI(
    _projectId: BigNumberish,
    _projectBaseIpfsURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateProjectBaseIpfsURI(uint256,string)"(
    _projectId: BigNumberish,
    _projectBaseIpfsURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProjectBaseURI(
    _projectId: BigNumberish,
    _newBaseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateProjectBaseURI(uint256,string)"(
    _projectId: BigNumberish,
    _newBaseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProjectCurrencyInfo(
    _projectId: BigNumberish,
    _currencySymbol: string,
    _currencyAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateProjectCurrencyInfo(uint256,string,address)"(
    _projectId: BigNumberish,
    _currencySymbol: string,
    _currencyAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProjectDescription(
    _projectId: BigNumberish,
    _projectDescription: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateProjectDescription(uint256,string)"(
    _projectId: BigNumberish,
    _projectDescription: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProjectIpfsHash(
    _projectId: BigNumberish,
    _ipfsHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateProjectIpfsHash(uint256,string)"(
    _projectId: BigNumberish,
    _ipfsHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProjectLicense(
    _projectId: BigNumberish,
    _projectLicense: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateProjectLicense(uint256,string)"(
    _projectId: BigNumberish,
    _projectLicense: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProjectMaxInvocations(
    _projectId: BigNumberish,
    _maxInvocations: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateProjectMaxInvocations(uint256,uint256)"(
    _projectId: BigNumberish,
    _maxInvocations: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProjectName(
    _projectId: BigNumberish,
    _projectName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateProjectName(uint256,string)"(
    _projectId: BigNumberish,
    _projectName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProjectPricePerTokenInWei(
    _projectId: BigNumberish,
    _pricePerTokenInWei: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateProjectPricePerTokenInWei(uint256,uint256)"(
    _projectId: BigNumberish,
    _pricePerTokenInWei: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProjectScript(
    _projectId: BigNumberish,
    _scriptId: BigNumberish,
    _script: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateProjectScript(uint256,uint256,string)"(
    _projectId: BigNumberish,
    _scriptId: BigNumberish,
    _script: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProjectScriptJSON(
    _projectId: BigNumberish,
    _projectScriptJSON: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateProjectScriptJSON(uint256,string)"(
    _projectId: BigNumberish,
    _projectScriptJSON: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProjectSecondaryMarketRoyaltyPercentage(
    _projectId: BigNumberish,
    _secondMarketRoyalty: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateProjectSecondaryMarketRoyaltyPercentage(uint256,uint256)"(
    _projectId: BigNumberish,
    _secondMarketRoyalty: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProjectWebsite(
    _projectId: BigNumberish,
    _projectWebsite: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateProjectWebsite(uint256,string)"(
    _projectId: BigNumberish,
    _projectWebsite: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRandomizerAddress(
    _randomizerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateRandomizerAddress(address)"(
    _randomizerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMintWhitelisted(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addMintWhitelisted(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addProject(
      _projectName: string,
      _artistAddress: string,
      _pricePerTokenInWei: BigNumberish,
      _dynamic: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "addProject(string,address,uint256,bool)"(
      _projectName: string,
      _artistAddress: string,
      _pricePerTokenInWei: BigNumberish,
      _dynamic: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    addProjectScript(
      _projectId: BigNumberish,
      _script: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addProjectScript(uint256,string)"(
      _projectId: BigNumberish,
      _script: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addWhitelisted(_address: string, overrides?: CallOverrides): Promise<void>;

    "addWhitelisted(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    "admin()"(overrides?: CallOverrides): Promise<string>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    artblocksAddress(overrides?: CallOverrides): Promise<string>;

    "artblocksAddress()"(overrides?: CallOverrides): Promise<string>;

    artblocksPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "artblocksPercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearTokenIpfsImageUri(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "clearTokenIpfsImageUri(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoyaltyData(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        artistAddress: string;
        additionalPayee: string;
        additionalPayeePercentage: BigNumber;
        royaltyFeeByID: BigNumber;
      }
    >;

    "getRoyaltyData(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        artistAddress: string;
        additionalPayee: string;
        additionalPayeePercentage: BigNumber;
        royaltyFeeByID: BigNumber;
      }
    >;

    hashToTokenId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hashToTokenId(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMintWhitelisted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isMintWhitelisted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "isWhitelisted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      _to: string,
      _projectId: BigNumberish,
      _by: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mint(address,uint256,address)"(
      _to: string,
      _projectId: BigNumberish,
      _by: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nextProjectId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextProjectId()"(overrides?: CallOverrides): Promise<BigNumber>;

    overrideTokenDynamicImageWithIpfsLink(
      _tokenId: BigNumberish,
      _ipfsHash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "overrideTokenDynamicImageWithIpfsLink(uint256,string)"(
      _tokenId: BigNumberish,
      _ipfsHash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    projectDetails(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, boolean] & {
        projectName: string;
        artist: string;
        description: string;
        website: string;
        license: string;
        dynamic: boolean;
      }
    >;

    "projectDetails(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, boolean] & {
        projectName: string;
        artist: string;
        description: string;
        website: string;
        license: string;
        dynamic: boolean;
      }
    >;

    projectIdToAdditionalPayee(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "projectIdToAdditionalPayee(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    projectIdToAdditionalPayeePercentage(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "projectIdToAdditionalPayeePercentage(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectIdToArtistAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "projectIdToArtistAddress(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    projectIdToCurrencyAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "projectIdToCurrencyAddress(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    projectIdToCurrencySymbol(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "projectIdToCurrencySymbol(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    projectIdToPricePerTokenInWei(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "projectIdToPricePerTokenInWei(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectIdToSecondaryMarketRoyaltyPercentage(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "projectIdToSecondaryMarketRoyaltyPercentage(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectScriptByIndex(
      _projectId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "projectScriptByIndex(uint256,uint256)"(
      _projectId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    projectScriptInfo(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, string, boolean, boolean] & {
        scriptJSON: string;
        scriptCount: BigNumber;
        useHashString: boolean;
        ipfsHash: string;
        locked: boolean;
        paused: boolean;
      }
    >;

    "projectScriptInfo(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, string, boolean, boolean] & {
        scriptJSON: string;
        scriptCount: BigNumber;
        useHashString: boolean;
        ipfsHash: string;
        locked: boolean;
        paused: boolean;
      }
    >;

    projectShowAllTokens(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "projectShowAllTokens(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    projectTokenInfo(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string,
        BigNumber,
        string,
        string
      ] & {
        artistAddress: string;
        pricePerTokenInWei: BigNumber;
        invocations: BigNumber;
        maxInvocations: BigNumber;
        active: boolean;
        additionalPayee: string;
        additionalPayeePercentage: BigNumber;
        currency: string;
        currencyAddress: string;
      }
    >;

    "projectTokenInfo(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string,
        BigNumber,
        string,
        string
      ] & {
        artistAddress: string;
        pricePerTokenInWei: BigNumber;
        invocations: BigNumber;
        maxInvocations: BigNumber;
        active: boolean;
        additionalPayee: string;
        additionalPayeePercentage: BigNumber;
        currency: string;
        currencyAddress: string;
      }
    >;

    projectURIInfo(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        projectBaseURI: string;
        projectBaseIpfsURI: string;
        useIpfs: boolean;
      }
    >;

    "projectURIInfo(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        projectBaseURI: string;
        projectBaseIpfsURI: string;
        useIpfs: boolean;
      }
    >;

    randomizerContract(overrides?: CallOverrides): Promise<string>;

    "randomizerContract()"(overrides?: CallOverrides): Promise<string>;

    removeMintWhitelisted(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeMintWhitelisted(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeProjectLastScript(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeProjectLastScript(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeWhitelisted(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeWhitelisted(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      to: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      to: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    staticIpfsImageLink(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "staticIpfsImageLink(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    toggleProjectIsActive(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "toggleProjectIsActive(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleProjectIsDynamic(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "toggleProjectIsDynamic(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleProjectIsLocked(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "toggleProjectIsLocked(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleProjectIsPaused(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "toggleProjectIsPaused(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleProjectUseHashString(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "toggleProjectUseHashString(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleProjectUseIpfsForStatic(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "toggleProjectUseIpfsForStatic(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdToHash(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "tokenIdToHash(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenIdToProjectId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenIdToProjectId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "tokenURI(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokensOfOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "tokensOfOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateArtblocksAddress(
      _artblocksAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateArtblocksAddress(address)"(
      _artblocksAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateArtblocksPercentage(
      _artblocksPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateArtblocksPercentage(uint256)"(
      _artblocksPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProjectAdditionalPayeeInfo(
      _projectId: BigNumberish,
      _additionalPayee: string,
      _additionalPayeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateProjectAdditionalPayeeInfo(uint256,address,uint256)"(
      _projectId: BigNumberish,
      _additionalPayee: string,
      _additionalPayeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProjectArtistAddress(
      _projectId: BigNumberish,
      _artistAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateProjectArtistAddress(uint256,address)"(
      _projectId: BigNumberish,
      _artistAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProjectArtistName(
      _projectId: BigNumberish,
      _projectArtistName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateProjectArtistName(uint256,string)"(
      _projectId: BigNumberish,
      _projectArtistName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProjectBaseIpfsURI(
      _projectId: BigNumberish,
      _projectBaseIpfsURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateProjectBaseIpfsURI(uint256,string)"(
      _projectId: BigNumberish,
      _projectBaseIpfsURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProjectBaseURI(
      _projectId: BigNumberish,
      _newBaseURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateProjectBaseURI(uint256,string)"(
      _projectId: BigNumberish,
      _newBaseURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProjectCurrencyInfo(
      _projectId: BigNumberish,
      _currencySymbol: string,
      _currencyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateProjectCurrencyInfo(uint256,string,address)"(
      _projectId: BigNumberish,
      _currencySymbol: string,
      _currencyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProjectDescription(
      _projectId: BigNumberish,
      _projectDescription: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateProjectDescription(uint256,string)"(
      _projectId: BigNumberish,
      _projectDescription: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProjectIpfsHash(
      _projectId: BigNumberish,
      _ipfsHash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateProjectIpfsHash(uint256,string)"(
      _projectId: BigNumberish,
      _ipfsHash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProjectLicense(
      _projectId: BigNumberish,
      _projectLicense: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateProjectLicense(uint256,string)"(
      _projectId: BigNumberish,
      _projectLicense: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProjectMaxInvocations(
      _projectId: BigNumberish,
      _maxInvocations: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateProjectMaxInvocations(uint256,uint256)"(
      _projectId: BigNumberish,
      _maxInvocations: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProjectName(
      _projectId: BigNumberish,
      _projectName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateProjectName(uint256,string)"(
      _projectId: BigNumberish,
      _projectName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProjectPricePerTokenInWei(
      _projectId: BigNumberish,
      _pricePerTokenInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateProjectPricePerTokenInWei(uint256,uint256)"(
      _projectId: BigNumberish,
      _pricePerTokenInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProjectScript(
      _projectId: BigNumberish,
      _scriptId: BigNumberish,
      _script: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateProjectScript(uint256,uint256,string)"(
      _projectId: BigNumberish,
      _scriptId: BigNumberish,
      _script: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProjectScriptJSON(
      _projectId: BigNumberish,
      _projectScriptJSON: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateProjectScriptJSON(uint256,string)"(
      _projectId: BigNumberish,
      _projectScriptJSON: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProjectSecondaryMarketRoyaltyPercentage(
      _projectId: BigNumberish,
      _secondMarketRoyalty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateProjectSecondaryMarketRoyaltyPercentage(uint256,uint256)"(
      _projectId: BigNumberish,
      _secondMarketRoyalty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProjectWebsite(
      _projectId: BigNumberish,
      _projectWebsite: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateProjectWebsite(uint256,string)"(
      _projectId: BigNumberish,
      _projectWebsite: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRandomizerAddress(
      _randomizerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateRandomizerAddress(address)"(
      _randomizerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    Mint(
      _to: string | null,
      _tokenId: BigNumberish | null,
      _projectId: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _to: string; _tokenId: BigNumber; _projectId: BigNumber }
    >;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;
  };

  estimateGas: {
    addMintWhitelisted(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addMintWhitelisted(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addProject(
      _projectName: string,
      _artistAddress: string,
      _pricePerTokenInWei: BigNumberish,
      _dynamic: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addProject(string,address,uint256,bool)"(
      _projectName: string,
      _artistAddress: string,
      _pricePerTokenInWei: BigNumberish,
      _dynamic: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addProjectScript(
      _projectId: BigNumberish,
      _script: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addProjectScript(uint256,string)"(
      _projectId: BigNumberish,
      _script: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addWhitelisted(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addWhitelisted(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    "admin()"(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    artblocksAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "artblocksAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    artblocksPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "artblocksPercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearTokenIpfsImageUri(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "clearTokenIpfsImageUri(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoyaltyData(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoyaltyData(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashToTokenId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hashToTokenId(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMintWhitelisted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isMintWhitelisted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelisted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isWhitelisted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      _to: string,
      _projectId: BigNumberish,
      _by: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mint(address,uint256,address)"(
      _to: string,
      _projectId: BigNumberish,
      _by: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextProjectId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextProjectId()"(overrides?: CallOverrides): Promise<BigNumber>;

    overrideTokenDynamicImageWithIpfsLink(
      _tokenId: BigNumberish,
      _ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "overrideTokenDynamicImageWithIpfsLink(uint256,string)"(
      _tokenId: BigNumberish,
      _ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectDetails(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "projectDetails(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectIdToAdditionalPayee(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "projectIdToAdditionalPayee(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectIdToAdditionalPayeePercentage(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "projectIdToAdditionalPayeePercentage(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectIdToArtistAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "projectIdToArtistAddress(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectIdToCurrencyAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "projectIdToCurrencyAddress(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectIdToCurrencySymbol(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "projectIdToCurrencySymbol(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectIdToPricePerTokenInWei(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "projectIdToPricePerTokenInWei(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectIdToSecondaryMarketRoyaltyPercentage(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "projectIdToSecondaryMarketRoyaltyPercentage(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectScriptByIndex(
      _projectId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "projectScriptByIndex(uint256,uint256)"(
      _projectId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectScriptInfo(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "projectScriptInfo(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectShowAllTokens(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "projectShowAllTokens(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectTokenInfo(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "projectTokenInfo(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectURIInfo(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "projectURIInfo(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    randomizerContract(overrides?: CallOverrides): Promise<BigNumber>;

    "randomizerContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeMintWhitelisted(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeMintWhitelisted(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeProjectLastScript(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeProjectLastScript(uint256)"(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeWhitelisted(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeWhitelisted(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      to: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      to: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    staticIpfsImageLink(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "staticIpfsImageLink(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    toggleProjectIsActive(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "toggleProjectIsActive(uint256)"(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleProjectIsDynamic(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "toggleProjectIsDynamic(uint256)"(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleProjectIsLocked(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "toggleProjectIsLocked(uint256)"(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleProjectIsPaused(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "toggleProjectIsPaused(uint256)"(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleProjectUseHashString(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "toggleProjectUseHashString(uint256)"(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleProjectUseIpfsForStatic(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "toggleProjectUseIpfsForStatic(uint256)"(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdToHash(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenIdToHash(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdToProjectId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenIdToProjectId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensOfOwner(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "tokensOfOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateArtblocksAddress(
      _artblocksAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateArtblocksAddress(address)"(
      _artblocksAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateArtblocksPercentage(
      _artblocksPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateArtblocksPercentage(uint256)"(
      _artblocksPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProjectAdditionalPayeeInfo(
      _projectId: BigNumberish,
      _additionalPayee: string,
      _additionalPayeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateProjectAdditionalPayeeInfo(uint256,address,uint256)"(
      _projectId: BigNumberish,
      _additionalPayee: string,
      _additionalPayeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProjectArtistAddress(
      _projectId: BigNumberish,
      _artistAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateProjectArtistAddress(uint256,address)"(
      _projectId: BigNumberish,
      _artistAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProjectArtistName(
      _projectId: BigNumberish,
      _projectArtistName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateProjectArtistName(uint256,string)"(
      _projectId: BigNumberish,
      _projectArtistName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProjectBaseIpfsURI(
      _projectId: BigNumberish,
      _projectBaseIpfsURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateProjectBaseIpfsURI(uint256,string)"(
      _projectId: BigNumberish,
      _projectBaseIpfsURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProjectBaseURI(
      _projectId: BigNumberish,
      _newBaseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateProjectBaseURI(uint256,string)"(
      _projectId: BigNumberish,
      _newBaseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProjectCurrencyInfo(
      _projectId: BigNumberish,
      _currencySymbol: string,
      _currencyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateProjectCurrencyInfo(uint256,string,address)"(
      _projectId: BigNumberish,
      _currencySymbol: string,
      _currencyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProjectDescription(
      _projectId: BigNumberish,
      _projectDescription: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateProjectDescription(uint256,string)"(
      _projectId: BigNumberish,
      _projectDescription: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProjectIpfsHash(
      _projectId: BigNumberish,
      _ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateProjectIpfsHash(uint256,string)"(
      _projectId: BigNumberish,
      _ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProjectLicense(
      _projectId: BigNumberish,
      _projectLicense: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateProjectLicense(uint256,string)"(
      _projectId: BigNumberish,
      _projectLicense: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProjectMaxInvocations(
      _projectId: BigNumberish,
      _maxInvocations: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateProjectMaxInvocations(uint256,uint256)"(
      _projectId: BigNumberish,
      _maxInvocations: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProjectName(
      _projectId: BigNumberish,
      _projectName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateProjectName(uint256,string)"(
      _projectId: BigNumberish,
      _projectName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProjectPricePerTokenInWei(
      _projectId: BigNumberish,
      _pricePerTokenInWei: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateProjectPricePerTokenInWei(uint256,uint256)"(
      _projectId: BigNumberish,
      _pricePerTokenInWei: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProjectScript(
      _projectId: BigNumberish,
      _scriptId: BigNumberish,
      _script: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateProjectScript(uint256,uint256,string)"(
      _projectId: BigNumberish,
      _scriptId: BigNumberish,
      _script: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProjectScriptJSON(
      _projectId: BigNumberish,
      _projectScriptJSON: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateProjectScriptJSON(uint256,string)"(
      _projectId: BigNumberish,
      _projectScriptJSON: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProjectSecondaryMarketRoyaltyPercentage(
      _projectId: BigNumberish,
      _secondMarketRoyalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateProjectSecondaryMarketRoyaltyPercentage(uint256,uint256)"(
      _projectId: BigNumberish,
      _secondMarketRoyalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProjectWebsite(
      _projectId: BigNumberish,
      _projectWebsite: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateProjectWebsite(uint256,string)"(
      _projectId: BigNumberish,
      _projectWebsite: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRandomizerAddress(
      _randomizerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateRandomizerAddress(address)"(
      _randomizerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMintWhitelisted(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addMintWhitelisted(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addProject(
      _projectName: string,
      _artistAddress: string,
      _pricePerTokenInWei: BigNumberish,
      _dynamic: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addProject(string,address,uint256,bool)"(
      _projectName: string,
      _artistAddress: string,
      _pricePerTokenInWei: BigNumberish,
      _dynamic: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addProjectScript(
      _projectId: BigNumberish,
      _script: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addProjectScript(uint256,string)"(
      _projectId: BigNumberish,
      _script: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addWhitelisted(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addWhitelisted(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "admin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    artblocksAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "artblocksAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    artblocksPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "artblocksPercentage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clearTokenIpfsImageUri(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "clearTokenIpfsImageUri(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoyaltyData(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoyaltyData(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashToTokenId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hashToTokenId(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMintWhitelisted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isMintWhitelisted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelisted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWhitelisted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _to: string,
      _projectId: BigNumberish,
      _by: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256,address)"(
      _to: string,
      _projectId: BigNumberish,
      _by: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextProjectId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextProjectId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    overrideTokenDynamicImageWithIpfsLink(
      _tokenId: BigNumberish,
      _ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "overrideTokenDynamicImageWithIpfsLink(uint256,string)"(
      _tokenId: BigNumberish,
      _ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectDetails(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "projectDetails(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectIdToAdditionalPayee(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "projectIdToAdditionalPayee(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectIdToAdditionalPayeePercentage(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "projectIdToAdditionalPayeePercentage(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectIdToArtistAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "projectIdToArtistAddress(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectIdToCurrencyAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "projectIdToCurrencyAddress(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectIdToCurrencySymbol(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "projectIdToCurrencySymbol(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectIdToPricePerTokenInWei(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "projectIdToPricePerTokenInWei(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectIdToSecondaryMarketRoyaltyPercentage(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "projectIdToSecondaryMarketRoyaltyPercentage(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectScriptByIndex(
      _projectId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "projectScriptByIndex(uint256,uint256)"(
      _projectId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectScriptInfo(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "projectScriptInfo(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectShowAllTokens(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "projectShowAllTokens(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectTokenInfo(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "projectTokenInfo(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectURIInfo(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "projectURIInfo(uint256)"(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    randomizerContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "randomizerContract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeMintWhitelisted(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeMintWhitelisted(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeProjectLastScript(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeProjectLastScript(uint256)"(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeWhitelisted(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeWhitelisted(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      to: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      to: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    staticIpfsImageLink(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "staticIpfsImageLink(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleProjectIsActive(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "toggleProjectIsActive(uint256)"(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleProjectIsDynamic(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "toggleProjectIsDynamic(uint256)"(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleProjectIsLocked(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "toggleProjectIsLocked(uint256)"(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleProjectIsPaused(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "toggleProjectIsPaused(uint256)"(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleProjectUseHashString(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "toggleProjectUseHashString(uint256)"(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleProjectUseIpfsForStatic(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "toggleProjectUseIpfsForStatic(uint256)"(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdToHash(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenIdToHash(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdToProjectId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenIdToProjectId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensOfOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokensOfOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateArtblocksAddress(
      _artblocksAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateArtblocksAddress(address)"(
      _artblocksAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateArtblocksPercentage(
      _artblocksPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateArtblocksPercentage(uint256)"(
      _artblocksPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProjectAdditionalPayeeInfo(
      _projectId: BigNumberish,
      _additionalPayee: string,
      _additionalPayeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateProjectAdditionalPayeeInfo(uint256,address,uint256)"(
      _projectId: BigNumberish,
      _additionalPayee: string,
      _additionalPayeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProjectArtistAddress(
      _projectId: BigNumberish,
      _artistAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateProjectArtistAddress(uint256,address)"(
      _projectId: BigNumberish,
      _artistAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProjectArtistName(
      _projectId: BigNumberish,
      _projectArtistName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateProjectArtistName(uint256,string)"(
      _projectId: BigNumberish,
      _projectArtistName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProjectBaseIpfsURI(
      _projectId: BigNumberish,
      _projectBaseIpfsURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateProjectBaseIpfsURI(uint256,string)"(
      _projectId: BigNumberish,
      _projectBaseIpfsURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProjectBaseURI(
      _projectId: BigNumberish,
      _newBaseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateProjectBaseURI(uint256,string)"(
      _projectId: BigNumberish,
      _newBaseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProjectCurrencyInfo(
      _projectId: BigNumberish,
      _currencySymbol: string,
      _currencyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateProjectCurrencyInfo(uint256,string,address)"(
      _projectId: BigNumberish,
      _currencySymbol: string,
      _currencyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProjectDescription(
      _projectId: BigNumberish,
      _projectDescription: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateProjectDescription(uint256,string)"(
      _projectId: BigNumberish,
      _projectDescription: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProjectIpfsHash(
      _projectId: BigNumberish,
      _ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateProjectIpfsHash(uint256,string)"(
      _projectId: BigNumberish,
      _ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProjectLicense(
      _projectId: BigNumberish,
      _projectLicense: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateProjectLicense(uint256,string)"(
      _projectId: BigNumberish,
      _projectLicense: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProjectMaxInvocations(
      _projectId: BigNumberish,
      _maxInvocations: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateProjectMaxInvocations(uint256,uint256)"(
      _projectId: BigNumberish,
      _maxInvocations: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProjectName(
      _projectId: BigNumberish,
      _projectName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateProjectName(uint256,string)"(
      _projectId: BigNumberish,
      _projectName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProjectPricePerTokenInWei(
      _projectId: BigNumberish,
      _pricePerTokenInWei: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateProjectPricePerTokenInWei(uint256,uint256)"(
      _projectId: BigNumberish,
      _pricePerTokenInWei: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProjectScript(
      _projectId: BigNumberish,
      _scriptId: BigNumberish,
      _script: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateProjectScript(uint256,uint256,string)"(
      _projectId: BigNumberish,
      _scriptId: BigNumberish,
      _script: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProjectScriptJSON(
      _projectId: BigNumberish,
      _projectScriptJSON: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateProjectScriptJSON(uint256,string)"(
      _projectId: BigNumberish,
      _projectScriptJSON: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProjectSecondaryMarketRoyaltyPercentage(
      _projectId: BigNumberish,
      _secondMarketRoyalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateProjectSecondaryMarketRoyaltyPercentage(uint256,uint256)"(
      _projectId: BigNumberish,
      _secondMarketRoyalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProjectWebsite(
      _projectId: BigNumberish,
      _projectWebsite: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateProjectWebsite(uint256,string)"(
      _projectId: BigNumberish,
      _projectWebsite: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRandomizerAddress(
      _randomizerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateRandomizerAddress(address)"(
      _randomizerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
