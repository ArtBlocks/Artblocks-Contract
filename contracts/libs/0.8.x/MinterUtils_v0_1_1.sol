// SPDX-License-Identifier: LGPL-3.0-only
// Created By: Art Blocks Inc.

import "../../interfaces/0.8.x/IGenArt721CoreContractV3_Base.sol";
import "../../interfaces/0.8.x/IGenArt721CoreContractV3.sol";
import "../../interfaces/0.8.x/IGenArt721CoreContractV3_Engine.sol";

import "@openzeppelin-4.7/contracts/token/ERC20/IERC20.sol";

pragma solidity ^0.8.0;

/**
 * @title Art Blocks Minter Utils Library
 * @notice A collection of utility functions that may be used across the Art
 * Blocks minter ecosystem.
 * Semantic versioning is used in the solidity file name, and is therefore
 * controlled by contracts importing the appropriate filename version.
 * @author Art Blocks Inc.
 */
library MinterUtils {
    string private constant FLAGSHIP_CORE_TYPE = "GenArt721CoreV3";

    /**
     * @notice splits ETH funds between sender (if refund), providers,
     * artist, and artist's additional payee for a token purchased on
     * project `_projectId`.
     * WARNING: This function uses msg.value and msg.sender to determine
     * refund amounts, and therefore may not be applicable to all use cases
     * (e.g. do not use with Dutch Auctions with on-chain settlement).
     * @dev possible DoS during splits is acknowledged, and mitigated by
     * business practices, including end-to-end testing on mainnet, and
     * admin-accepted artist payment addresses.
     * @param projectId Project ID for which funds shall be split.
     * @param pricePerTokenInWei Current price of token, in Wei.
     */
    function splitFundsETH(
        uint256 projectId,
        uint256 pricePerTokenInWei,
        address genArt721CoreAddress,
        bool isEngine
    ) internal {
        if (msg.value > 0) {
            bool success_;
            // send refund to sender
            uint256 refund = msg.value - pricePerTokenInWei;
            if (refund > 0) {
                (success_, ) = msg.sender.call{value: refund}("");
                require(success_, "Refund failed");
            }
            // split revenues
            splitRevenuesETH(
                projectId,
                pricePerTokenInWei,
                genArt721CoreAddress,
                isEngine
            );
        }
    }

    /**
     * @notice splits ETH revenues between providers, artist, and artist's
     * additional payee for revenue generated by project `_projectId`.
     * @dev possible DoS during splits is acknowledged, and mitigated by
     * business practices, including end-to-end testing on mainnet, and
     * admin-accepted artist payment addresses.
     * @param projectId Project ID for which funds shall be split.
     * @param valueInWei Value to be split, in Wei.
     */
    function splitRevenuesETH(
        uint256 projectId,
        uint256 valueInWei,
        address genArtCoreContract,
        bool isEngine
    ) internal {
        if (valueInWei > 0) {
            bool success;
            // split funds between platforms, artist, and artist's
            // additional payee
            uint256 renderProviderRevenue_;
            address payable renderProviderAddress_;
            uint256 artistRevenue_;
            address payable artistAddress_;
            uint256 additionalPayeePrimaryRevenue_;
            address payable additionalPayeePrimaryAddress_;
            if (!isEngine) {
                // get flagship splits
                (
                    renderProviderRevenue_, // artblocks revenue
                    renderProviderAddress_, // artblocks address
                    artistRevenue_,
                    artistAddress_,
                    additionalPayeePrimaryRevenue_,
                    additionalPayeePrimaryAddress_
                ) = IGenArt721CoreContractV3(genArtCoreContract)
                    .getPrimaryRevenueSplits(projectId, valueInWei);
            } else {
                // get engine splits
                uint256 platformProviderRevenue_;
                address payable platformProviderAddress_;
                (
                    renderProviderRevenue_,
                    renderProviderAddress_,
                    platformProviderRevenue_,
                    platformProviderAddress_,
                    artistRevenue_,
                    artistAddress_,
                    additionalPayeePrimaryRevenue_,
                    additionalPayeePrimaryAddress_
                ) = IGenArt721CoreContractV3_Engine(genArtCoreContract)
                    .getPrimaryRevenueSplits(projectId, valueInWei);
                // Platform Provider payment (only possible if engine)
                if (platformProviderRevenue_ > 0) {
                    (success, ) = platformProviderAddress_.call{
                        value: platformProviderRevenue_
                    }("");
                    require(success, "Platform Provider payment failed");
                }
            }
            // Render Provider / Art Blocks payment
            if (renderProviderRevenue_ > 0) {
                (success, ) = renderProviderAddress_.call{
                    value: renderProviderRevenue_
                }("");
                require(success, "Render Provider payment failed");
            }
            // artist payment
            if (artistRevenue_ > 0) {
                (success, ) = artistAddress_.call{value: artistRevenue_}("");
                require(success, "Artist payment failed");
            }
            // additional payee payment
            if (additionalPayeePrimaryRevenue_ > 0) {
                (success, ) = additionalPayeePrimaryAddress_.call{
                    value: additionalPayeePrimaryRevenue_
                }("");
                require(success, "Additional Payee payment failed");
            }
        }
    }

    /**
     * @notice splits ERC-20 funds between providers, artist, and artist's
     * additional payee, for a token purchased on project `_projectId`.
     * @dev possible DoS during splits is acknowledged, and mitigated by
     * business practices, including end-to-end testing on mainnet, and
     * admin-accepted artist payment addresses.
     */
    function splitFundsERC20(
        uint256 projectId,
        uint256 pricePerTokenInWei,
        address currencyAddress,
        address genArtCoreContract,
        bool isEngine
    ) internal {
        IERC20 _projectCurrency = IERC20(currencyAddress);
        // split remaining funds between foundation, artist, and artist's
        // additional payee
        uint256 renderProviderRevenue_;
        address payable renderProviderAddress_;
        uint256 artistRevenue_;
        address payable artistAddress_;
        uint256 additionalPayeePrimaryRevenue_;
        address payable additionalPayeePrimaryAddress_;
        if (!isEngine) {
            // get flagship splits
            (
                renderProviderRevenue_, // artblocks revenue
                renderProviderAddress_, // artblocks address
                artistRevenue_,
                artistAddress_,
                additionalPayeePrimaryRevenue_,
                additionalPayeePrimaryAddress_
            ) = IGenArt721CoreContractV3(genArtCoreContract)
                .getPrimaryRevenueSplits(projectId, pricePerTokenInWei);
        } else {
            // get engine splits
            uint256 platformProviderRevenue_;
            address payable platformProviderAddress_;
            (
                renderProviderRevenue_,
                renderProviderAddress_,
                platformProviderRevenue_,
                platformProviderAddress_,
                artistRevenue_,
                artistAddress_,
                additionalPayeePrimaryRevenue_,
                additionalPayeePrimaryAddress_
            ) = IGenArt721CoreContractV3_Engine(genArtCoreContract)
                .getPrimaryRevenueSplits(projectId, pricePerTokenInWei);
            // Platform Provider payment (only possible if engine)
            if (platformProviderRevenue_ > 0) {
                _projectCurrency.transferFrom(
                    msg.sender,
                    platformProviderAddress_,
                    platformProviderRevenue_
                );
            }
        }
        // Art Blocks payment
        if (renderProviderRevenue_ > 0) {
            _projectCurrency.transferFrom(
                msg.sender,
                renderProviderAddress_,
                renderProviderRevenue_
            );
        }
        // artist payment
        if (artistRevenue_ > 0) {
            _projectCurrency.transferFrom(
                msg.sender,
                artistAddress_,
                artistRevenue_
            );
        }
        // additional payee payment
        if (additionalPayeePrimaryRevenue_ > 0) {
            _projectCurrency.transferFrom(
                msg.sender,
                additionalPayeePrimaryAddress_,
                additionalPayeePrimaryRevenue_
            );
        }
    }

    function getV3CoreIsEngine(
        IGenArt721CoreContractV3_Base genArt721CoreV3_Base
    ) internal returns (bool isEngine) {
        // determine if core is engine based off of coreType() response
        isEngine =
            keccak256(abi.encodePacked(genArt721CoreV3_Base.coreType())) ==
            keccak256(abi.encodePacked(FLAGSHIP_CORE_TYPE));
        // validate the above logic by confirming the payment split response
        _validateV3CoreGetPrimaryRevenueSplitsResponse(
            isEngine,
            address(genArt721CoreV3_Base)
        );
        return isEngine;
    }

    /**
     * @notice Validates that a GenArt721CoreV3 core contract's
     * `getPrimaryRevenueSplits` function returns the expected number of
     * return values based on the `isEngine` expected state of the core
     * contract.
     * @param isEngine Whether the core contract is expected to be an Art
     * Blocks Engine contract or not.
     * @param genArt721CoreV3 The address of the deployed core contract.
     */
    function _validateV3CoreGetPrimaryRevenueSplitsResponse(
        bool isEngine,
        address genArt721CoreV3
    ) private {
        // confirm split payment returns expected qty of return values to
        // add protection against a misconfigured isEngine state
        bytes memory payload = abi.encodeWithSignature(
            "getPrimaryRevenueSplits(uint256,uint256)",
            0,
            0
        );
        (bool success, bytes memory returnData) = genArt721CoreV3.call(payload);
        require(success);
        if (isEngine) {
            // require 8 32-byte words returned if engine
            require(
                returnData.length == 8 * 32,
                "Unexpected revenue split bytes"
            );
        } else {
            // require 6 32-byte words returned if flagship (not engine)
            require(
                returnData.length == 6 * 32,
                "Unexpected revenue split bytes"
            );
        }
    }
}
